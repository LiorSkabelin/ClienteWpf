//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteWpf.FlexPulseService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="DevicesList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Devices")]
    [System.SerializableAttribute()]
    public class DevicesList : System.Collections.Generic.List<ClienteWpf.FlexPulseService.Devices> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Devices", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Devices : ClienteWpf.FlexPulseService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteWpf.FlexPulseService.Gymer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteWpf.FlexPulseService.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteWpf.FlexPulseService.TrainingProgram))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteWpf.FlexPulseService.TrainProgramDevice))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ClienteWpf.FlexPulseService.Devices))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Gymer", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Gymer : ClienteWpf.FlexPulseService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClienteWpf.FlexPulseService.User MycoachField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WeightField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClienteWpf.FlexPulseService.User Mycoach {
            get {
                return this.MycoachField;
            }
            set {
                if ((object.ReferenceEquals(this.MycoachField, value) != true)) {
                    this.MycoachField = value;
                    this.RaisePropertyChanged("Mycoach");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class User : ClienteWpf.FlexPulseService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCoachField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMangerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Bday {
            get {
                return this.BdayField;
            }
            set {
                if ((this.BdayField.Equals(value) != true)) {
                    this.BdayField = value;
                    this.RaisePropertyChanged("Bday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((this.GenderField.Equals(value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCoach {
            get {
                return this.IsCoachField;
            }
            set {
                if ((this.IsCoachField.Equals(value) != true)) {
                    this.IsCoachField = value;
                    this.RaisePropertyChanged("IsCoach");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsManger {
            get {
                return this.IsMangerField;
            }
            set {
                if ((this.IsMangerField.Equals(value) != true)) {
                    this.IsMangerField = value;
                    this.RaisePropertyChanged("IsManger");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname {
            get {
                return this.LastnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastnameField, value) != true)) {
                    this.LastnameField = value;
                    this.RaisePropertyChanged("Lastname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrainingProgram", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class TrainingProgram : ClienteWpf.FlexPulseService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClienteWpf.FlexPulseService.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Approved {
            get {
                return this.ApprovedField;
            }
            set {
                if ((this.ApprovedField.Equals(value) != true)) {
                    this.ApprovedField = value;
                    this.RaisePropertyChanged("Approved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Level {
            get {
                return this.LevelField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelField, value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClienteWpf.FlexPulseService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrainProgramDevice", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class TrainProgramDevice : ClienteWpf.FlexPulseService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClienteWpf.FlexPulseService.Devices DeviceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClienteWpf.FlexPulseService.TrainingProgram ProgramField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClienteWpf.FlexPulseService.Devices Device {
            get {
                return this.DeviceField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceField, value) != true)) {
                    this.DeviceField = value;
                    this.RaisePropertyChanged("Device");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClienteWpf.FlexPulseService.TrainingProgram Program {
            get {
                return this.ProgramField;
            }
            set {
                if ((object.ReferenceEquals(this.ProgramField, value) != true)) {
                    this.ProgramField = value;
                    this.RaisePropertyChanged("Program");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rep {
            get {
                return this.RepField;
            }
            set {
                if ((this.RepField.Equals(value) != true)) {
                    this.RepField = value;
                    this.RaisePropertyChanged("Rep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Set {
            get {
                return this.SetField;
            }
            set {
                if ((this.SetField.Equals(value) != true)) {
                    this.SetField = value;
                    this.RaisePropertyChanged("Set");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="GymerList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Gymer")]
    [System.SerializableAttribute()]
    public class GymerList : System.Collections.Generic.List<ClienteWpf.FlexPulseService.Gymer> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TrainingProgramList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="TrainingProgram")]
    [System.SerializableAttribute()]
    public class TrainingProgramList : System.Collections.Generic.List<ClienteWpf.FlexPulseService.TrainingProgram> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="TrainProgramDeviceList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="TrainProgramDevice")]
    [System.SerializableAttribute()]
    public class TrainProgramDeviceList : System.Collections.Generic.List<ClienteWpf.FlexPulseService.TrainProgramDevice> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UserList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="User")]
    [System.SerializableAttribute()]
    public class UserList : System.Collections.Generic.List<ClienteWpf.FlexPulseService.User> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FlexPulseService.IServiceGym")]
    public interface IServiceGym {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectAll", ReplyAction="http://tempuri.org/IServiceGym/SelectAllResponse")]
        ClienteWpf.FlexPulseService.DevicesList SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectAll", ReplyAction="http://tempuri.org/IServiceGym/SelectAllResponse")]
        System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.DevicesList> SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertDevices", ReplyAction="http://tempuri.org/IServiceGym/InsertDevicesResponse")]
        int InsertDevices(ClienteWpf.FlexPulseService.Devices devices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertDevices", ReplyAction="http://tempuri.org/IServiceGym/InsertDevicesResponse")]
        System.Threading.Tasks.Task<int> InsertDevicesAsync(ClienteWpf.FlexPulseService.Devices devices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateDevices", ReplyAction="http://tempuri.org/IServiceGym/UpdateDevicesResponse")]
        int UpdateDevices(ClienteWpf.FlexPulseService.Devices devices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateDevices", ReplyAction="http://tempuri.org/IServiceGym/UpdateDevicesResponse")]
        System.Threading.Tasks.Task<int> UpdateDevicesAsync(ClienteWpf.FlexPulseService.Devices devices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteDevices", ReplyAction="http://tempuri.org/IServiceGym/DeleteDevicesResponse")]
        int DeleteDevices(ClienteWpf.FlexPulseService.Devices devices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteDevices", ReplyAction="http://tempuri.org/IServiceGym/DeleteDevicesResponse")]
        System.Threading.Tasks.Task<int> DeleteDevicesAsync(ClienteWpf.FlexPulseService.Devices devices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectAllGymers", ReplyAction="http://tempuri.org/IServiceGym/SelectAllGymersResponse")]
        ClienteWpf.FlexPulseService.GymerList SelectAllGymers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectAllGymers", ReplyAction="http://tempuri.org/IServiceGym/SelectAllGymersResponse")]
        System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.GymerList> SelectAllGymersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectGymerByUser", ReplyAction="http://tempuri.org/IServiceGym/SelectGymerByUserResponse")]
        ClienteWpf.FlexPulseService.Gymer SelectGymerByUser(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectGymerByUser", ReplyAction="http://tempuri.org/IServiceGym/SelectGymerByUserResponse")]
        System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.Gymer> SelectGymerByUserAsync(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertGymer", ReplyAction="http://tempuri.org/IServiceGym/InsertGymerResponse")]
        int InsertGymer(ClienteWpf.FlexPulseService.Gymer gymer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertGymer", ReplyAction="http://tempuri.org/IServiceGym/InsertGymerResponse")]
        System.Threading.Tasks.Task<int> InsertGymerAsync(ClienteWpf.FlexPulseService.Gymer gymer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateGymer", ReplyAction="http://tempuri.org/IServiceGym/UpdateGymerResponse")]
        int UpdateGymer(ClienteWpf.FlexPulseService.Gymer gymer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateGymer", ReplyAction="http://tempuri.org/IServiceGym/UpdateGymerResponse")]
        System.Threading.Tasks.Task<int> UpdateGymerAsync(ClienteWpf.FlexPulseService.Gymer gymer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteGymer", ReplyAction="http://tempuri.org/IServiceGym/DeleteGymerResponse")]
        int DeleteGymer(ClienteWpf.FlexPulseService.Gymer gymer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteGymer", ReplyAction="http://tempuri.org/IServiceGym/DeleteGymerResponse")]
        System.Threading.Tasks.Task<int> DeleteGymerAsync(ClienteWpf.FlexPulseService.Gymer gymer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectAllTrainingp", ReplyAction="http://tempuri.org/IServiceGym/SelectAllTrainingpResponse")]
        ClienteWpf.FlexPulseService.TrainingProgramList SelectAllTrainingp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectAllTrainingp", ReplyAction="http://tempuri.org/IServiceGym/SelectAllTrainingpResponse")]
        System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.TrainingProgramList> SelectAllTrainingpAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertTrainingProgram", ReplyAction="http://tempuri.org/IServiceGym/InsertTrainingProgramResponse")]
        int InsertTrainingProgram(ClienteWpf.FlexPulseService.TrainingProgram trainingp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertTrainingProgram", ReplyAction="http://tempuri.org/IServiceGym/InsertTrainingProgramResponse")]
        System.Threading.Tasks.Task<int> InsertTrainingProgramAsync(ClienteWpf.FlexPulseService.TrainingProgram trainingp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateTrainingProgram", ReplyAction="http://tempuri.org/IServiceGym/UpdateTrainingProgramResponse")]
        int UpdateTrainingProgram(ClienteWpf.FlexPulseService.TrainingProgram trainingp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateTrainingProgram", ReplyAction="http://tempuri.org/IServiceGym/UpdateTrainingProgramResponse")]
        System.Threading.Tasks.Task<int> UpdateTrainingProgramAsync(ClienteWpf.FlexPulseService.TrainingProgram trainingp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteTrainingProgram", ReplyAction="http://tempuri.org/IServiceGym/DeleteTrainingProgramResponse")]
        int DeleteTrainingProgram(ClienteWpf.FlexPulseService.TrainingProgram trainingp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteTrainingProgram", ReplyAction="http://tempuri.org/IServiceGym/DeleteTrainingProgramResponse")]
        System.Threading.Tasks.Task<int> DeleteTrainingProgramAsync(ClienteWpf.FlexPulseService.TrainingProgram trainingp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectProgramDevicesByProgram", ReplyAction="http://tempuri.org/IServiceGym/SelectProgramDevicesByProgramResponse")]
        ClienteWpf.FlexPulseService.TrainProgramDeviceList SelectProgramDevicesByProgram(ClienteWpf.FlexPulseService.TrainingProgram program);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectProgramDevicesByProgram", ReplyAction="http://tempuri.org/IServiceGym/SelectProgramDevicesByProgramResponse")]
        System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.TrainProgramDeviceList> SelectProgramDevicesByProgramAsync(ClienteWpf.FlexPulseService.TrainingProgram program);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectProgramDevicesByDevice", ReplyAction="http://tempuri.org/IServiceGym/SelectProgramDevicesByDeviceResponse")]
        ClienteWpf.FlexPulseService.TrainProgramDeviceList SelectProgramDevicesByDevice(ClienteWpf.FlexPulseService.Devices devices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectProgramDevicesByDevice", ReplyAction="http://tempuri.org/IServiceGym/SelectProgramDevicesByDeviceResponse")]
        System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.TrainProgramDeviceList> SelectProgramDevicesByDeviceAsync(ClienteWpf.FlexPulseService.Devices devices);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertTrainingDevice", ReplyAction="http://tempuri.org/IServiceGym/InsertTrainingDeviceResponse")]
        int InsertTrainingDevice(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertTrainingDevice", ReplyAction="http://tempuri.org/IServiceGym/InsertTrainingDeviceResponse")]
        System.Threading.Tasks.Task<int> InsertTrainingDeviceAsync(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateTrainingDevice", ReplyAction="http://tempuri.org/IServiceGym/UpdateTrainingDeviceResponse")]
        int UpdateTrainingDevice(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateTrainingDevice", ReplyAction="http://tempuri.org/IServiceGym/UpdateTrainingDeviceResponse")]
        System.Threading.Tasks.Task<int> UpdateTrainingDeviceAsync(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteTrainingDevice", ReplyAction="http://tempuri.org/IServiceGym/DeleteTrainingDeviceResponse")]
        int DeleteTrainingDevice(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteTrainingDevice", ReplyAction="http://tempuri.org/IServiceGym/DeleteTrainingDeviceResponse")]
        System.Threading.Tasks.Task<int> DeleteTrainingDeviceAsync(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectAllUserList", ReplyAction="http://tempuri.org/IServiceGym/SelectAllUserListResponse")]
        ClienteWpf.FlexPulseService.UserList SelectAllUserList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/SelectAllUserList", ReplyAction="http://tempuri.org/IServiceGym/SelectAllUserListResponse")]
        System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.UserList> SelectAllUserListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/Login", ReplyAction="http://tempuri.org/IServiceGym/LoginResponse")]
        ClienteWpf.FlexPulseService.User Login(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/Login", ReplyAction="http://tempuri.org/IServiceGym/LoginResponse")]
        System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.User> LoginAsync(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/IsEmailFree", ReplyAction="http://tempuri.org/IServiceGym/IsEmailFreeResponse")]
        bool IsEmailFree(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/IsEmailFree", ReplyAction="http://tempuri.org/IServiceGym/IsEmailFreeResponse")]
        System.Threading.Tasks.Task<bool> IsEmailFreeAsync(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertUser", ReplyAction="http://tempuri.org/IServiceGym/InsertUserResponse")]
        int InsertUser(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/InsertUser", ReplyAction="http://tempuri.org/IServiceGym/InsertUserResponse")]
        System.Threading.Tasks.Task<int> InsertUserAsync(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateUser", ReplyAction="http://tempuri.org/IServiceGym/UpdateUserResponse")]
        int UpdateUser(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/UpdateUser", ReplyAction="http://tempuri.org/IServiceGym/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteUser", ReplyAction="http://tempuri.org/IServiceGym/DeleteUserResponse")]
        int DeleteUser(ClienteWpf.FlexPulseService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceGym/DeleteUser", ReplyAction="http://tempuri.org/IServiceGym/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(ClienteWpf.FlexPulseService.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceGymChannel : ClienteWpf.FlexPulseService.IServiceGym, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceGymClient : System.ServiceModel.ClientBase<ClienteWpf.FlexPulseService.IServiceGym>, ClienteWpf.FlexPulseService.IServiceGym {
        
        public ServiceGymClient() {
        }
        
        public ServiceGymClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceGymClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceGymClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceGymClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClienteWpf.FlexPulseService.DevicesList SelectAll() {
            return base.Channel.SelectAll();
        }
        
        public System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.DevicesList> SelectAllAsync() {
            return base.Channel.SelectAllAsync();
        }
        
        public int InsertDevices(ClienteWpf.FlexPulseService.Devices devices) {
            return base.Channel.InsertDevices(devices);
        }
        
        public System.Threading.Tasks.Task<int> InsertDevicesAsync(ClienteWpf.FlexPulseService.Devices devices) {
            return base.Channel.InsertDevicesAsync(devices);
        }
        
        public int UpdateDevices(ClienteWpf.FlexPulseService.Devices devices) {
            return base.Channel.UpdateDevices(devices);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDevicesAsync(ClienteWpf.FlexPulseService.Devices devices) {
            return base.Channel.UpdateDevicesAsync(devices);
        }
        
        public int DeleteDevices(ClienteWpf.FlexPulseService.Devices devices) {
            return base.Channel.DeleteDevices(devices);
        }
        
        public System.Threading.Tasks.Task<int> DeleteDevicesAsync(ClienteWpf.FlexPulseService.Devices devices) {
            return base.Channel.DeleteDevicesAsync(devices);
        }
        
        public ClienteWpf.FlexPulseService.GymerList SelectAllGymers() {
            return base.Channel.SelectAllGymers();
        }
        
        public System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.GymerList> SelectAllGymersAsync() {
            return base.Channel.SelectAllGymersAsync();
        }
        
        public ClienteWpf.FlexPulseService.Gymer SelectGymerByUser(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.SelectGymerByUser(user);
        }
        
        public System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.Gymer> SelectGymerByUserAsync(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.SelectGymerByUserAsync(user);
        }
        
        public int InsertGymer(ClienteWpf.FlexPulseService.Gymer gymer) {
            return base.Channel.InsertGymer(gymer);
        }
        
        public System.Threading.Tasks.Task<int> InsertGymerAsync(ClienteWpf.FlexPulseService.Gymer gymer) {
            return base.Channel.InsertGymerAsync(gymer);
        }
        
        public int UpdateGymer(ClienteWpf.FlexPulseService.Gymer gymer) {
            return base.Channel.UpdateGymer(gymer);
        }
        
        public System.Threading.Tasks.Task<int> UpdateGymerAsync(ClienteWpf.FlexPulseService.Gymer gymer) {
            return base.Channel.UpdateGymerAsync(gymer);
        }
        
        public int DeleteGymer(ClienteWpf.FlexPulseService.Gymer gymer) {
            return base.Channel.DeleteGymer(gymer);
        }
        
        public System.Threading.Tasks.Task<int> DeleteGymerAsync(ClienteWpf.FlexPulseService.Gymer gymer) {
            return base.Channel.DeleteGymerAsync(gymer);
        }
        
        public ClienteWpf.FlexPulseService.TrainingProgramList SelectAllTrainingp() {
            return base.Channel.SelectAllTrainingp();
        }
        
        public System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.TrainingProgramList> SelectAllTrainingpAsync() {
            return base.Channel.SelectAllTrainingpAsync();
        }
        
        public int InsertTrainingProgram(ClienteWpf.FlexPulseService.TrainingProgram trainingp) {
            return base.Channel.InsertTrainingProgram(trainingp);
        }
        
        public System.Threading.Tasks.Task<int> InsertTrainingProgramAsync(ClienteWpf.FlexPulseService.TrainingProgram trainingp) {
            return base.Channel.InsertTrainingProgramAsync(trainingp);
        }
        
        public int UpdateTrainingProgram(ClienteWpf.FlexPulseService.TrainingProgram trainingp) {
            return base.Channel.UpdateTrainingProgram(trainingp);
        }
        
        public System.Threading.Tasks.Task<int> UpdateTrainingProgramAsync(ClienteWpf.FlexPulseService.TrainingProgram trainingp) {
            return base.Channel.UpdateTrainingProgramAsync(trainingp);
        }
        
        public int DeleteTrainingProgram(ClienteWpf.FlexPulseService.TrainingProgram trainingp) {
            return base.Channel.DeleteTrainingProgram(trainingp);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTrainingProgramAsync(ClienteWpf.FlexPulseService.TrainingProgram trainingp) {
            return base.Channel.DeleteTrainingProgramAsync(trainingp);
        }
        
        public ClienteWpf.FlexPulseService.TrainProgramDeviceList SelectProgramDevicesByProgram(ClienteWpf.FlexPulseService.TrainingProgram program) {
            return base.Channel.SelectProgramDevicesByProgram(program);
        }
        
        public System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.TrainProgramDeviceList> SelectProgramDevicesByProgramAsync(ClienteWpf.FlexPulseService.TrainingProgram program) {
            return base.Channel.SelectProgramDevicesByProgramAsync(program);
        }
        
        public ClienteWpf.FlexPulseService.TrainProgramDeviceList SelectProgramDevicesByDevice(ClienteWpf.FlexPulseService.Devices devices) {
            return base.Channel.SelectProgramDevicesByDevice(devices);
        }
        
        public System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.TrainProgramDeviceList> SelectProgramDevicesByDeviceAsync(ClienteWpf.FlexPulseService.Devices devices) {
            return base.Channel.SelectProgramDevicesByDeviceAsync(devices);
        }
        
        public int InsertTrainingDevice(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice) {
            return base.Channel.InsertTrainingDevice(programDevice);
        }
        
        public System.Threading.Tasks.Task<int> InsertTrainingDeviceAsync(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice) {
            return base.Channel.InsertTrainingDeviceAsync(programDevice);
        }
        
        public int UpdateTrainingDevice(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice) {
            return base.Channel.UpdateTrainingDevice(programDevice);
        }
        
        public System.Threading.Tasks.Task<int> UpdateTrainingDeviceAsync(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice) {
            return base.Channel.UpdateTrainingDeviceAsync(programDevice);
        }
        
        public int DeleteTrainingDevice(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice) {
            return base.Channel.DeleteTrainingDevice(programDevice);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTrainingDeviceAsync(ClienteWpf.FlexPulseService.TrainProgramDevice programDevice) {
            return base.Channel.DeleteTrainingDeviceAsync(programDevice);
        }
        
        public ClienteWpf.FlexPulseService.UserList SelectAllUserList() {
            return base.Channel.SelectAllUserList();
        }
        
        public System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.UserList> SelectAllUserListAsync() {
            return base.Channel.SelectAllUserListAsync();
        }
        
        public ClienteWpf.FlexPulseService.User Login(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.Login(user);
        }
        
        public System.Threading.Tasks.Task<ClienteWpf.FlexPulseService.User> LoginAsync(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.LoginAsync(user);
        }
        
        public bool IsEmailFree(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.IsEmailFree(user);
        }
        
        public System.Threading.Tasks.Task<bool> IsEmailFreeAsync(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.IsEmailFreeAsync(user);
        }
        
        public int InsertUser(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.InsertUser(user);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserAsync(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.InsertUserAsync(user);
        }
        
        public int UpdateUser(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public int DeleteUser(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(ClienteWpf.FlexPulseService.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
    }
}
